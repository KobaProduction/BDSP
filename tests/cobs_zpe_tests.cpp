#include <gtest/gtest.h>

#include <BDSP/streams/COBS/reader.h>
#include <BDSP/streams/COBS/writer.h>

#include "utils/cobs.h"
#include "utils/show.h"
#include "utils/testing.h"

using namespace BDSP::streams;
using namespace BDSP::streams::COBS;
using namespace BDSP::streams::COBS::core;

TEST(cobs_zpe_tests, cobs_zpe_writer_set_configuration_test) {
    class COBSZPEWriterCoreTest: public COBSZPEWriterCore {
    public:
        void set_current_size_of_the_sequence_to_be_replaced(uint8_t value) {
            _current_size_of_the_sequence_to_be_replaced = value;
        }
    };

    class COBSZPEReaderCoreTest: public COBSZPEReaderCore {
    public:
        void set_fst_state(fsm_state_t state) { _fsm_state = state; }
    };

    COBSZPEWriterCoreTest cobs_writer;
    COBSZPEReaderCoreTest cobs_reader;
    cobs_reader.reset_read_state(false);

    cobs_config_t config = {.delimiter = '\0',
                            .depth = 224,
                            .size_of_the_sequence_to_be_replaced = 2,
                            .byte_of_the_sequence_to_be_replaced = '\0'};

    EXPECT_EQ(cobs_writer.set_config(config), SET_OK);
    EXPECT_EQ(cobs_reader.set_config(config), SET_OK);

    cobs_writer.set_current_size_of_the_sequence_to_be_replaced(1);
    cobs_reader.set_fst_state(REGULAR_BYTE);
    EXPECT_EQ(cobs_writer.set_config(config), ERROR_PROCESS_NOT_FINISHED);
    EXPECT_EQ(cobs_reader.set_config(config), ERROR_PROCESS_NOT_FINISHED);
    cobs_writer.set_current_size_of_the_sequence_to_be_replaced(0);
    cobs_reader.set_fst_state(SERVICE_BYTE);

    config.depth = 255;
    EXPECT_EQ(cobs_writer.set_config(config), ERROR_DEPTH_ZPE);
    EXPECT_EQ(cobs_reader.set_config(config), ERROR_DEPTH_ZPE);
}

TEST(cobs_zpe_tests, writer_reset_elimination_sequence_test) {
    COBSZPEWriter cobs_writer;
    cobs_config_t config = cobs_writer.get_config();

    std::vector<uint8_t> data = {config.byte_of_the_sequence_to_be_replaced, 1};
    std::vector<uint8_t> correct_encoded = {1, 2, 1, config.delimiter};
    start_test_writer(cobs_writer, data, correct_encoded);
}

TEST(cobs_zpe_tests, writer_elimination_sequence_after_offset_test) {
    COBSZPEWriter cobs_writer;
    cobs_config_t config = cobs_writer.get_config();
    config.delimiter = 255;
    EXPECT_EQ(cobs_writer.set_config(config), SET_OK);

    cobs_writer.set_stream_writer([](uint8_t byte, void *ctx_ptr) { }, nullptr);

    std::vector<uint8_t> data;

    data.push_back(config.byte_of_the_sequence_to_be_replaced);

    for (int i = 0; i < 255 - config.depth; ++i) {
        data.push_back(99);
    }
    data.push_back(config.byte_of_the_sequence_to_be_replaced);
    std::vector<uint8_t> correct_encoded = {34,
                                            config.byte_of_the_sequence_to_be_replaced,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            99,
                                            config.byte_of_the_sequence_to_be_replaced,
                                            config.delimiter};
    start_test_writer(cobs_writer, data, correct_encoded);
}

TEST(cobs_zpe_tests, cobs_with_zero_pair_elimination_article_test) {
    COBSZPEWriter cobs_writer;
    COBSZPEReader cobs_reader;

    std::vector<uint8_t> data = {0x45, 0x00, 0x00, 0x2C, 0x4C, 0x79, 0x00, 0x00, 0x40, 0x06, 0x4F, 0x37};
    std::vector<uint8_t> correct_encoded = {0xE2, 0x45, 0xE4, 0x2C, 0x4C, 0x79, 0x05, 0x40, 0x06, 0x4F, 0x37, 0x00};
    start_test_writer(cobs_writer, data, correct_encoded, true);
    start_test_reader(cobs_reader, correct_encoded, data, true);
}

TEST(cobs_zpe_tests, cobs_with_zero_pair_elimination_full_test) {
    COBSZPEWriter cobs_writer;
    COBSZPEReader cobs_reader;

    std::vector<uint8_t> data = {
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0x45, 0x00, 0x00, 0x2C, 0x4C, 0x79, 0x00, 0x00, 0x40, 0x06, 0x4F, 0x37};

    std::vector<uint8_t> correct_encoded = {
        0xE0, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0xAA, 0xAA, 0xE2, 0x45, 0xE4, 0x2C, 0x4C, 0x79, 0x05, 0x40, 0x06, 0x4F, 0x37, 0x00};

    start_test_writer(cobs_writer, data, correct_encoded, true);
    start_test_reader(cobs_reader, correct_encoded, data, true);
}